export interface NavItem {
  title: string;
  href: string;
  children?: NavItem[];
}

export interface RouteConfig {
  title: string;
  href: string;
  description?: string;
  children?: RouteConfig[];
}

// Define the route structure manually for now
// In the future, this could be auto-generated by scanning the app directory
export const routes: RouteConfig[] = [
  {
    title: 'Home',
    href: '/',
    description: 'Welcome to React Study Buddy',
  },
  {
    title: 'Algorithms',
    href: '/algorithms',
    description: 'Binary Search Tree Algorithms',
    children: [
      {
        title: 'Binary Search Tree',
        href: '/algorithms',
        description: 'Interactive BST visualization and algorithms',
      },
    ],
  },
  {
    title: 'React Concepts',
    href: '/react-concepts',
    description: 'React fundamentals and patterns',
    children: [
      {
        title: 'Hooks',
        href: '/react-concepts/hooks',
        description: 'React Hooks fundamentals',
      },
      {
        title: 'State Management',
        href: '/react-concepts/state',
        description: 'State management patterns',
      },
      {
        title: 'Components',
        href: '/react-concepts/components',
        description: 'Component architecture',
      },
    ],
  },
];

export function generateNavItems(): NavItem[] {
  return routes.map((route) => ({
    title: route.title,
    href: route.href,
    children: route.children?.map((child) => ({
      title: child.title,
      href: child.href,
    })),
  }));
}

export function getRouteByPath(path: string): RouteConfig | undefined {
  const findRoute = (routes: RouteConfig[], targetPath: string): RouteConfig | undefined => {
    for (const route of routes) {
      if (route.href === targetPath) {
        return route;
      }
      if (route.children) {
        const found = findRoute(route.children, targetPath);
        if (found) return found;
      }
    }
    return undefined;
  };

  return findRoute(routes, path);
}
