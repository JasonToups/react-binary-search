1:"$Sreact.fragment"
2:I[54892,["124","static/chunks/124-70c8fed49d5b4d1b.js","177","static/chunks/app/layout-2b1419d8a3b682d0.js"],"default"]
3:I[22441,[],""]
4:I[17389,[],""]
5:I[17571,["532","static/chunks/532-c6f17c345a008583.js","763","static/chunks/763-6501646a6b51093c.js","655","static/chunks/app/react-concepts/hooks/page-78c2d2474cb6c3c9.js"],"ReactConceptPageLayout"]
b:I[2363,[],""]
:HL["/react-binary-search/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/react-binary-search/_next/static/css/53a70fe990c07f23.css","style"]
6:T614,# React Hooks

Hooks are functions that let you "hook into" React state and lifecycle features from function components.

## Basic Hooks

### useState
Manages local state in functional components.

```jsx
function Counter() {
  const [count, setCount] = useState(0);
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
```

### useEffect
Handles side effects in functional components.

```jsx
function DataFetcher() {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    fetch('/api/data')
      .then(res => res.json())
      .then(setData);
  }, []); // Empty dependency array = run once
}
```

## Hooks Flow

```mermaid
graph TD
    A[Component Renders] --> B[useState Initializes]
    B --> C[useEffect Runs]
    C --> D[State Updates]
    D --> E[Component Re-renders]
    E --> F[useEffect Cleanup]
```

## Rules of Hooks

1. **Only call hooks at the top level**
2. **Only call hooks from React functions**
3. **Hook names must start with "use"**

## Custom Hooks

```jsx
function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });

  const setValue = value => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.log(error);
    }
  };

  return [storedValue, setValue];
}
```8:Tb15,# Custom Hooks

## Building Reusable Logic

Custom hooks let you extract component logic into reusable functions.

```jsx
function useDataFetching(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error('Network response was not ok');
      const result = await response.json();
      setData(result);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [url]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return { data, loading, error, refetch: fetchData };
}
```

## Advanced Hook Patterns

### useReducer for Complex State
```jsx
function useCounter(initialState = 0) {
  const [state, dispatch] = useReducer(counterReducer, initialState);
  
  const increment = () => dispatch({ type: 'INCREMENT' });
  const decrement = () => dispatch({ type: 'DECREMENT' });
  const reset = () => dispatch({ type: 'RESET' });
  
  return { count: state, increment, decrement, reset };
}

function counterReducer(state, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1;
    case 'DECREMENT':
      return state - 1;
    case 'RESET':
      return 0;
    default:
      return state;
  }
}
```

### useCallback and useMemo
```jsx
function ExpensiveComponent({ items, onItemClick }) {
  // Memoize expensive calculation
  const expensiveValue = useMemo(() => {
    return items.reduce((acc, item) => acc + item.value, 0);
  }, [items]);

  // Memoize callback to prevent unnecessary re-renders
  const handleClick = useCallback((item) => {
    onItemClick(item);
  }, [onItemClick]);

  return (
    <div>
      <p>Total: {expensiveValue}</p>
      {items.map(item => (
        <button key={item.id} onClick={() => handleClick(item)}>
          {item.name}
        </button>
      ))}
    </div>
  );
}
```

## Hook Composition

```mermaid
graph LR
    A[Custom Hook] --> B[State Logic]
    A --> C[Effect Logic]
    A --> D[Event Handlers]
    B --> E[Component State]
    C --> F[Side Effects]
    D --> G[User Interactions]
```

## Testing Custom Hooks

```jsx
import { renderHook, act } from '@testing-library/react';

test('useCounter increments count', () => {
  const { result } = renderHook(() => useCounter(0));
  
  act(() => {
    result.current.increment();
  });
  
  expect(result.current.count).toBe(1);
});
```

## Best Practices

1. **Keep hooks focused and single-purpose**
2. **Use descriptive names starting with "use"**
3. **Handle cleanup in useEffect return function**
4. **Optimize with useCallback and useMemo when needed**
5. **Test hooks with renderHook utility"0:{"P":null,"b":"W614VzwNsHdI1PhCZIUb9","p":"/react-binary-search","c":["","react-concepts","hooks",""],"i":false,"f":[[["",{"children":["react-concepts",{"children":["hooks",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/react-binary-search/_next/static/css/53a70fe990c07f23.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css"}],["$","script",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"}],["$","script",null,{"children":"\n            mermaid.initialize({ \n              startOnLoad: true,\n              theme: 'default',\n              flowchart: { useMaxWidth: true }\n            });\n          "}]]}],["$","body",null,{"className":"__className_78d0b2","children":["$","div",null,{"className":"layout","children":[["$","$L2",null,{}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}]]}],{"children":["react-concepts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["hooks",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L5",null,{"title":"React Hooks","description":"Master React hooks: useState, useEffect, useContext, and custom hooks.","conceptGuide":"$6","interactiveComponent":"$L7","furtherExploration":"$8"}],null,"$L9"]}],{},null,false]},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
c:I[6607,[],"OutletBoundary"]
e:I[2181,[],"AsyncMetadataOutlet"]
10:I[6607,[],"ViewportBoundary"]
12:I[6607,[],"MetadataBoundary"]
13:"$Sreact.suspense"
7:["$","div",null,{"className":"text-center","children":[["$","h3",null,{"className":"text-lg font-semibold mb-4","children":"Hooks Demo"}],["$","div",null,{"className":"space-y-4","children":["$","div",null,{"className":"p-4 bg-muted rounded","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":"Interactive hooks demonstration will go here"}]}]}]]}]
9:["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]
a:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
f:{"metadata":[["$","title","0",{"children":"React Binary Search - Algorithm Study Guide"}],["$","meta","1",{"name":"description","content":"Learn React concepts and binary search algorithms through interactive examples"}],["$","meta","2",{"name":"author","content":"React Binary Search Team"}],["$","meta","3",{"name":"keywords","content":"React,Algorithms,Binary Search,TypeScript,Learning"}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
