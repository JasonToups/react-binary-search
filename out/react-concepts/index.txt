1:"$Sreact.fragment"
2:I[54596,["822","static/chunks/822-fe6c23912db2e7f0.js","177","static/chunks/app/layout-cfedc8fcf31c4563.js"],"default"]
3:I[91799,[],""]
4:I[26731,[],""]
5:I[2683,["774","static/chunks/774-0e066eddd2320794.js","891","static/chunks/891-704d620be23b8ddd.js","136","static/chunks/app/react-concepts/page-8a92ee3d227859b1.js"],"ReactConceptPageLayout"]
b:I[4925,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/665ae8a03fa26bca.css","style"]
6:Te7e,# React Fundamentals

React is a JavaScript library for building user interfaces. It's component-based, declarative, and efficient.

## Key Concepts

- **Components**: Reusable UI pieces that can be composed together
- **Props**: Data passed down from parent to child components
- **State**: Internal data that can change over time
- **JSX**: Syntax extension that looks like HTML but is JavaScript

## Component Structure

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}
```

## Mermaid Component Diagram

```mermaid
graph TD
    A[App Component] --> B[Header Component]
    A --> C[Main Content]
    A --> D[Footer Component]
    C --> E[Feature Component]
    C --> F[Feature Component]
```

## Learning Path

1. **Start with Components** - Learn the building blocks
2. **Master State & Props** - Understand data flow
3. **Explore Hooks** - Modern React patterns
4. **Practice Data Fetching** - Real-world scenarios
5. **Build Complex UIs** - Advanced patterns

## Why React?

- **Declarative**: Describe what you want, not how to do it
- **Component-Based**: Reusable, maintainable code
- **Virtual DOM**: Efficient updates and rendering
- **Rich Ecosystem**: Huge community and libraries
- **Learn Once, Write Anywhere**: Web, mobile, desktop

## Component Types

### Functional Components

```jsx
function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
}
```

### Class Components

```jsx
class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}
```

### Arrow Function Components

```jsx
const Greeting = ({ name }) => {
  return <h1>Hello, {name}!</h1>;
};
```

## Props and State

### Props (Read-only)

```jsx
function UserCard({ user, onEdit }) {
  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
      <button onClick={() => onEdit(user.id)}>Edit</button>
    </div>
  );
}
```

### State (Mutable)

```jsx
function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

## JSX Rules

1. **Must return a single element** (or Fragment)
2. **Use camelCase** for attributes
3. **Use className** instead of class
4. **JavaScript expressions** go in curly braces `{}`
5. **Close all tags** (including self-closing)

```jsx
function Example() {
  const name = 'React';
  const isActive = true;

  return (
    <div className="container">
      <h1>Welcome to {name}</h1>
      <button disabled={!isActive}>{isActive ? 'Click me' : 'Disabled'}</button>
    </div>
  );
}
```

## Event Handling

```jsx
function Form() {
  const [input, setInput] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', input);
  };

  const handleChange = (e) => {
    setInput(e.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input value={input} onChange={handleChange} placeholder="Type something..." />
      <button type="submit">Submit</button>
    </form>
  );
}
```

## Conditional Rendering

```jsx
function Greeting({ user }) {
  if (!user) {
    return <div>Please log in</div>;
  }

  return (
    <div>
      <h1>Welcome back, {user.name}!</h1>
      {user.isAdmin && <AdminPanel />}
    </div>
  );
}
```

## Lists and Keys

```jsx
function TodoList({ todos }) {
  return (
    <ul>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.text}</li>
      ))}
    </ul>
  );
}
```

## Component Composition

```jsx
function App() {
  return (
    <div>
      <Header />
      <Main>
        <Sidebar />
        <Content />
      </Main>
      <Footer />
    </div>
  );
}
```
8:T1c3b,# Advanced React Patterns

## Custom Hooks

Custom hooks allow you to extract component logic into reusable functions.

```jsx
function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(initialValue);

  return { count, increment, decrement, reset };
}
```

## Performance Optimization

- **React.memo**: Prevents unnecessary re-renders
- **useMemo**: Memoizes expensive calculations
- **useCallback**: Memoizes function references

## Component Composition

```mermaid
graph LR
    A[Container] --> B[Header]
    A --> C[Content]
    A --> D[Footer]
    C --> E[Sidebar]
    C --> F[Main]
```

## Advanced Patterns

### Render Props

```jsx
function DataFetcher({ render }) {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetchData().then(setData);
  }, []);

  return render(data);
}

// Usage
<DataFetcher render={(data) => <UserList users={data} />} />;
```

### Higher-Order Components

```jsx
function withLoading(Component) {
  return function WrappedComponent(props) {
    const [loading, setLoading] = useState(true);

    useEffect(() => {
      // Simulate loading
      setTimeout(() => setLoading(false), 1000);
    }, []);

    if (loading) return <div>Loading...</div>;
    return <Component {...props} />;
  };
}

const UserListWithLoading = withLoading(UserList);
```

### Compound Components

```jsx
function Tabs({ children }) {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>{children}</TabsContext.Provider>
  );
}

Tabs.List = function TabsList({ children }) {
  return <div className="tabs-list">{children}</div>;
};

Tabs.Tab = function Tab({ children, index }) {
  const { activeTab, setActiveTab } = useContext(TabsContext);

  return (
    <button className={activeTab === index ? 'active' : ''} onClick={() => setActiveTab(index)}>
      {children}
    </button>
  );
};

Tabs.Panel = function TabPanel({ children, index }) {
  const { activeTab } = useContext(TabsContext);

  if (activeTab !== index) return null;
  return <div className="tab-panel">{children}</div>;
};

// Usage
<Tabs>
  <Tabs.List>
    <Tabs.Tab index={0}>Tab 1</Tabs.Tab>
    <Tabs.Tab index={1}>Tab 2</Tabs.Tab>
  </Tabs.List>
  <Tabs.Panel index={0}>Content 1</Tabs.Panel>
  <Tabs.Panel index={1}>Content 2</Tabs.Panel>
</Tabs>;
```

## Context API

```jsx
const ThemeContext = createContext();

function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');

  const toggleTheme = () => {
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };

  return <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>;
}

function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
}
```

## Error Boundaries

```jsx
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <details>
            <summary>Error details</summary>
            <pre>{this.state.error?.toString()}</pre>
          </details>
        </div>
      );
    }

    return this.props.children;
  }
}
```

## Testing React Components

```jsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

test('counter increments when button is clicked', () => {
  render(<Counter />);

  const button = screen.getByRole('button');
  userEvent.click(button);

  expect(screen.getByText('Count: 1')).toBeInTheDocument();
});

test('renders user name', () => {
  const user = { name: 'John Doe' };
  render(<UserProfile user={user} />);

  expect(screen.getByText('John Doe')).toBeInTheDocument();
});
```

## React DevTools

### Profiler

```jsx
import { Profiler } from 'react';

function onRenderCallback(id, phase, actualDuration, baseDuration, startTime, commitTime) {
  console.log(`Component ${id} took ${actualDuration}ms to render`);
}

<Profiler id="App" onRender={onRenderCallback}>
  <App />
</Profiler>;
```

### Strict Mode

```jsx
import { StrictMode } from 'react';

<StrictMode>
  <App />
</StrictMode>;
```

## Best Practices

1. **Keep components small and focused**
2. **Use TypeScript for better type safety**
3. **Implement proper error boundaries**
4. **Optimize for performance early**
5. **Write comprehensive tests**
6. **Follow consistent naming conventions**

## Code Splitting

### Dynamic Imports

```jsx
import { lazy, Suspense } from 'react';

const LazyComponent = lazy(() => import('./LazyComponent'));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LazyComponent />
    </Suspense>
  );
}
```

### Route-based Splitting

```jsx
import { lazy } from 'react';
import { Routes, Route } from 'react-router-dom';

const Home = lazy(() => import('./pages/Home'));
const About = lazy(() => import('./pages/About'));
const Contact = lazy(() => import('./pages/Contact'));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Suspense>
  );
}
```

## Performance Monitoring

### React Profiler

```jsx
import { Profiler } from 'react';

function onRenderCallback(id, phase, actualDuration, baseDuration, startTime, commitTime) {
  // Log performance metrics
  console.log({
    id,
    phase,
    actualDuration,
    baseDuration,
    startTime,
    commitTime,
  });
}

<Profiler id="App" onRender={onRenderCallback}>
  <App />
</Profiler>;
```

### Bundle Analysis

```bash
# Analyze bundle size
npm install --save-dev webpack-bundle-analyzer

# Add to webpack config
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = {
  plugins: [
    new BundleAnalyzerPlugin()
  ]
};
```

## Accessibility

### ARIA Labels

```jsx
function SearchInput({ onSearch }) {
  return (
    <div>
      <label htmlFor="search">Search:</label>
      <input
        id="search"
        type="text"
        aria-describedby="search-help"
        placeholder="Enter search terms..."
      />
      <div id="search-help">Type keywords to find relevant content</div>
    </div>
  );
}
```

### Keyboard Navigation

```jsx
function MenuItem({ children, onSelect }) {
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      onSelect();
    }
  };

  return (
    <div role="menuitem" tabIndex={0} onKeyDown={handleKeyDown} onClick={onSelect}>
      {children}
    </div>
  );
}
```
0:{"P":null,"b":"eFKoBWCIQvl-oibIJIPHZ","p":"","c":["","react-concepts",""],"i":false,"f":[[["",{"children":["react-concepts",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/665ae8a03fa26bca.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css"}]}],["$","body",null,{"className":"__className_e8ce0c","children":[["$","div",null,{"className":"layout","children":[["$","$L2",null,{}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],["$","script",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n            // Initialize highlight.js\n            if (typeof hljs !== 'undefined') {\n              hljs.highlightAll();\n            }\n            \n            // Initialize mermaid\n            if (typeof mermaid !== 'undefined') {\n              mermaid.initialize({ \n                startOnLoad: true,\n                theme: 'default',\n                flowchart: { useMaxWidth: true }\n              });\n            }\n          "}}]]}]]}]]}],{"children":["react-concepts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L5",null,{"title":"React Concepts","description":"Learn React fundamentals, hooks, state management, and component architecture.","conceptGuide":"$6","interactiveComponent":"$L7","furtherExploration":"$8"}],null,"$L9"]}],{},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
c:I[48574,[],"OutletBoundary"]
e:I[9779,[],"AsyncMetadataOutlet"]
10:I[48574,[],"ViewportBoundary"]
12:I[48574,[],"MetadataBoundary"]
13:"$Sreact.suspense"
7:["$","div",null,{"className":"text-center","children":[["$","h3",null,{"className":"text-lg font-semibold mb-4","children":"React Concepts Overview"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Components"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Learn about functional and class components, props, and composition."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Hooks"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Master useState, useEffect, and custom hooks for state management."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Data Fetching"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Handle API calls, loading states, and error handling."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"State Management"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Explore local state, context, and advanced patterns."}]]}]]}]]}]
9:["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]
a:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
f:{"metadata":[["$","title","0",{"children":"React Binary Search - Algorithm Study Guide"}],["$","meta","1",{"name":"description","content":"Learn React concepts and binary search algorithms through interactive examples"}],["$","meta","2",{"name":"author","content":"React Binary Search Team"}],["$","meta","3",{"name":"keywords","content":"React,Algorithms,Binary Search,TypeScript,Learning"}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
