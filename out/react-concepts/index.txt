1:"$Sreact.fragment"
2:I[54892,["124","static/chunks/124-70c8fed49d5b4d1b.js","177","static/chunks/app/layout-2b1419d8a3b682d0.js"],"default"]
3:I[22441,[],""]
4:I[17389,[],""]
5:I[17571,["532","static/chunks/532-c6f17c345a008583.js","763","static/chunks/763-6501646a6b51093c.js","136","static/chunks/app/react-concepts/page-78c2d2474cb6c3c9.js"],"ReactConceptPageLayout"]
b:I[2363,[],""]
:HL["/react-binary-search/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/react-binary-search/_next/static/css/53a70fe990c07f23.css","style"]
6:T4fa,# React Fundamentals

React is a JavaScript library for building user interfaces. It's component-based, declarative, and efficient.

## Key Concepts

- **Components**: Reusable UI pieces that can be composed together
- **Props**: Data passed down from parent to child components
- **State**: Internal data that can change over time
- **JSX**: Syntax extension that looks like HTML but is JavaScript

## Component Structure

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}
```

## Mermaid Component Diagram

```mermaid
graph TD
    A[App Component] --> B[Header Component]
    A --> C[Main Content]
    A --> D[Footer Component]
    C --> E[Feature Component]
    C --> F[Feature Component]
```

## Learning Path

1. **Start with Components** - Learn the building blocks
2. **Master State & Props** - Understand data flow
3. **Explore Hooks** - Modern React patterns
4. **Practice Data Fetching** - Real-world scenarios
5. **Build Complex UIs** - Advanced patterns

## Why React?

- **Declarative**: Describe what you want, not how to do it
- **Component-Based**: Reusable, maintainable code
- **Virtual DOM**: Efficient updates and rendering
- **Rich Ecosystem**: Huge community and libraries
- **Learn Once, Write Anywhere**: Web, mobile, desktop8:T7c6,# Advanced React Patterns

## Custom Hooks

Custom hooks allow you to extract component logic into reusable functions.

```jsx
function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);
  
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(initialValue);
  
  return { count, increment, decrement, reset };
}
```

## Performance Optimization

- **React.memo**: Prevents unnecessary re-renders
- **useMemo**: Memoizes expensive calculations
- **useCallback**: Memoizes function references

## Component Composition

```mermaid
graph LR
    A[Container] --> B[Header]
    A --> C[Content]
    A --> D[Footer]
    C --> E[Sidebar]
    C --> F[Main]
```

## Advanced Patterns

### Render Props
```jsx
function DataFetcher({ render }) {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    fetchData().then(setData);
  }, []);
  
  return render(data);
}
```

### Higher-Order Components
```jsx
function withLoading(Component) {
  return function WrappedComponent(props) {
    const [loading, setLoading] = useState(true);
    
    useEffect(() => {
      // Simulate loading
      setTimeout(() => setLoading(false), 1000);
    }, []);
    
    if (loading) return <div>Loading...</div>;
    return <Component {...props} />;
  };
}
```

## Testing React Components

```jsx
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

test('counter increments when button is clicked', () => {
  render(<Counter />);
  
  const button = screen.getByRole('button');
  userEvent.click(button);
  
  expect(screen.getByText('Count: 1')).toBeInTheDocument();
});
```

## Best Practices

1. **Keep components small and focused**
2. **Use TypeScript for better type safety**
3. **Implement proper error boundaries**
4. **Optimize for performance early**
5. **Write comprehensive tests**
6. **Follow consistent naming conventions"0:{"P":null,"b":"W614VzwNsHdI1PhCZIUb9","p":"/react-binary-search","c":["","react-concepts",""],"i":false,"f":[[["",{"children":["react-concepts",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/react-binary-search/_next/static/css/53a70fe990c07f23.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css"}],["$","script",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"}],["$","script",null,{"children":"\n            mermaid.initialize({ \n              startOnLoad: true,\n              theme: 'default',\n              flowchart: { useMaxWidth: true }\n            });\n          "}]]}],["$","body",null,{"className":"__className_78d0b2","children":["$","div",null,{"className":"layout","children":[["$","$L2",null,{}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}]]}],{"children":["react-concepts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L5",null,{"title":"React Concepts","description":"Learn React fundamentals, hooks, state management, and component architecture.","conceptGuide":"$6","interactiveComponent":"$L7","furtherExploration":"$8"}],null,"$L9"]}],{},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
c:I[6607,[],"OutletBoundary"]
e:I[2181,[],"AsyncMetadataOutlet"]
10:I[6607,[],"ViewportBoundary"]
12:I[6607,[],"MetadataBoundary"]
13:"$Sreact.suspense"
7:["$","div",null,{"className":"text-center","children":[["$","h3",null,{"className":"text-lg font-semibold mb-4","children":"React Concepts Overview"}],["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-6","children":[["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Components"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Learn about functional and class components, props, and composition."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Hooks"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Master useState, useEffect, and custom hooks for state management."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"Data Fetching"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Handle API calls, loading states, and error handling."}]]}],["$","div",null,{"className":"p-6 bg-muted rounded-lg","children":[["$","h4",null,{"className":"font-semibold mb-2","children":"State Management"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Explore local state, context, and advanced patterns."}]]}]]}]]}]
9:["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]
a:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
f:{"metadata":[["$","title","0",{"children":"React Binary Search - Algorithm Study Guide"}],["$","meta","1",{"name":"description","content":"Learn React concepts and binary search algorithms through interactive examples"}],["$","meta","2",{"name":"author","content":"React Binary Search Team"}],["$","meta","3",{"name":"keywords","content":"React,Algorithms,Binary Search,TypeScript,Learning"}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
